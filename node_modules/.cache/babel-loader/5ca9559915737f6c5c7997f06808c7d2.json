{"ast":null,"code":"import _classCallCheck from\"/Users/nupurmaheshwari/Documents/Poker/GitHub/nupurmaheshwari.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/nupurmaheshwari/Documents/Poker/GitHub/nupurmaheshwari.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/nupurmaheshwari/Documents/Poker/GitHub/nupurmaheshwari.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/nupurmaheshwari/Documents/Poker/GitHub/nupurmaheshwari.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/nupurmaheshwari/Documents/Poker/GitHub/nupurmaheshwari.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import SubmitButton from'./submitButton';import RefreshButton from'./refreshButton';import PotType from'./pottype';import StackDepth from'./stackDepth';import Hero from'./hero';import Villain from'./villain';import BvB from'./bvb';import HoleInput from'./holeinput';import Result from'./result';import CalcButton from'./calcButton';var BumFuck=/*#__PURE__*/function(_React$Component){_inherits(BumFuck,_React$Component);var _super=_createSuper(BumFuck);function BumFuck(){var _this;_classCallCheck(this,BumFuck);_this=_super.call(this);// submitValue holds the value of clicked button in pottype row\n_this.state={potValue:'',stackValue:'',heroValue:'',villainValue:'',bvbValue:'',// hole input value\nholeValue:'',action:'ACTION...'};_this.updatePotValue=_this.updatePotValue.bind(_assertThisInitialized(_this));_this.updateStackValue=_this.updateStackValue.bind(_assertThisInitialized(_this));_this.updateHeroValue=_this.updateHeroValue.bind(_assertThisInitialized(_this));_this.updateVillainValue=_this.updateVillainValue.bind(_assertThisInitialized(_this));_this.updateBvbValue=_this.updateBvbValue.bind(_assertThisInitialized(_this));_this.updateHoleValue=_this.updateHoleValue.bind(_assertThisInitialized(_this));_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this));return _this;}// setState forces rerender so buttons update with each click\n_createClass(BumFuck,[{key:\"updatePotValue\",value:function updatePotValue(val){this.setState({potValue:val});}},{key:\"updateStackValue\",value:function updateStackValue(val){this.setState({stackValue:val});}},{key:\"updateHeroValue\",value:function updateHeroValue(val){this.setState({heroValue:val});}},{key:\"updateVillainValue\",value:function updateVillainValue(val){this.setState({villainValue:val});}},{key:\"updateBvbValue\",value:function updateBvbValue(val){this.setState({bvbValue:val});}},{key:\"updateHoleValue\",value:function updateHoleValue(val){this.setState({holeValue:val});}// helper function called in every class's handleClick, allowing user to toggle between buttons\n// mappy = map of values to buttons (defined in handleclick)\n// ev = event state\n},{key:\"toggleButtons\",value:function toggleButtons(ev,mappy){for(var key in mappy){var button=mappy[key];if(key===ev.currentTarget.value){button.clickedOn();}else{button.clickedOff();}}}// upon submitting, value of action field should change and log of all values selected should appear\n},{key:\"handleSubmit\",value:function handleSubmit(){// also works, just puts the error somewhere else\nif(!this.state.holeValue.match(/^([AKQJakqj2-9]|10)([AKQJakqj2-9]|10)([osOS])$/)){// throw error message if hole input is invalid\nthis.setState({action:\"Hole Input Invalid\"});}else{// display all clicked buttons in console log\nvar final_array=[this.state.potValue,this.state.stackValue,this.state.heroValue,this.state.villainValue,this.state.bvbValue,this.state.holeValue];console.log(final_array);// TEMP - set output value\nthis.setState({action:\"RAISE 2.3X\"});}}},{key:\"render\",value:function render(){return/*#__PURE__*/ (// created new div \"final row\" for styling purposes\nReact.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h5\",null,\"POT TYPE\"),/*#__PURE__*/React.createElement(PotType,{pToggleButtons:this.toggleButtons,updatePotState:this.updatePotValue}),/*#__PURE__*/React.createElement(\"h5\",null,\"STACK DEPTH\"),/*#__PURE__*/React.createElement(StackDepth,{sToggleButtons:this.toggleButtons,updateStackState:this.updateStackValue}),/*#__PURE__*/React.createElement(\"h5\",null,\"HERO\"),/*#__PURE__*/React.createElement(Hero,{hToggleButtons:this.toggleButtons,updateHeroState:this.updateHeroValue,villainValue:this.state.villainValue,potValue:this.state.potValue}),/*#__PURE__*/React.createElement(\"h5\",null,\"VILLAIN\"),/*#__PURE__*/React.createElement(Villain,{vToggleButtons:this.toggleButtons,updateVillainState:this.updateVillainValue,heroValue:this.state.heroValue,potValue:this.state.potValue}),/*#__PURE__*/React.createElement(\"h5\",null,\"BVB\"),/*#__PURE__*/React.createElement(\"div\",{className:\"bvbRow\"},/*#__PURE__*/React.createElement(BvB,{bToggleButtons:this.toggleButtons,updateBvbState:this.updateBvbValue,heroValue:this.state.heroValue,potValue:this.state.potValue})),/*#__PURE__*/React.createElement(\"div\",{className:\"finalRow\"},/*#__PURE__*/React.createElement(HoleInput,{potValue:this.state.potValue,updateHoleState:this.updateHoleValue}),/*#__PURE__*/React.createElement(RefreshButton,null),/*#__PURE__*/React.createElement(SubmitButton,{holeInputValue:this.state.holeValue,submitState:this.submitState,handleSubmit:this.handleSubmit}),/*#__PURE__*/React.createElement(Result,{finalResult:this.state.action}),/*#__PURE__*/React.createElement(CalcButton,null))));}}]);return BumFuck;}(React.Component);export{BumFuck as default};","map":{"version":3,"sources":["/Users/nupurmaheshwari/Documents/Poker/GitHub/nupurmaheshwari.github.io/src/bumfuck.js"],"names":["React","SubmitButton","RefreshButton","PotType","StackDepth","Hero","Villain","BvB","HoleInput","Result","CalcButton","BumFuck","state","potValue","stackValue","heroValue","villainValue","bvbValue","holeValue","action","updatePotValue","bind","updateStackValue","updateHeroValue","updateVillainValue","updateBvbValue","updateHoleValue","handleSubmit","val","setState","ev","mappy","key","button","currentTarget","value","clickedOn","clickedOff","match","final_array","console","log","toggleButtons","submitState","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SubmitButton from './submitButton';\nimport RefreshButton from './refreshButton';\nimport PotType from './pottype';\nimport StackDepth from './stackDepth';\nimport Hero from './hero';\nimport Villain from './villain';\nimport BvB from './bvb';\nimport HoleInput from './holeinput';\nimport Result from './result';\nimport CalcButton from './calcButton'\n\nexport default class BumFuck extends React.Component {\n\n\tconstructor() {\n        super();\n\n        // submitValue holds the value of clicked button in pottype row\n        this.state = {\n\t\t\tpotValue: '',\n\t\t\tstackValue : '',\n\t\t\theroValue : '',\n\t\t\tvillainValue : '',\n\t\t\tbvbValue : '',\n\t\t\t// hole input value\n\t\t\tholeValue : '',\n\t\t\taction : 'ACTION...',\n        }\n        this.updatePotValue = this.updatePotValue.bind(this);\n        this.updateStackValue = this.updateStackValue.bind(this);\n        this.updateHeroValue = this.updateHeroValue.bind(this);\n        this.updateVillainValue = this.updateVillainValue.bind(this);\n        this.updateBvbValue = this.updateBvbValue.bind(this);\n        this.updateHoleValue = this.updateHoleValue.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n\t// setState forces rerender so buttons update with each click\n   updatePotValue(val) {\n    \tthis.setState ({potValue: val})\n\t}\n\tupdateStackValue(val) {\n    \tthis.setState ({stackValue: val})\n\t}\n\tupdateHeroValue(val) {\n    \tthis.setState ({heroValue: val})\n\t}\n\tupdateVillainValue(val) {\n    \tthis.setState ({villainValue: val})\n\t}\n\tupdateBvbValue(val) {\n    \tthis.setState ({bvbValue: val})\n\t}\n\tupdateHoleValue(val) {\n    \tthis.setState ({holeValue: val})\n\t}\n\n\t// helper function called in every class's handleClick, allowing user to toggle between buttons\n\t// mappy = map of values to buttons (defined in handleclick)\n\t// ev = event state\n\ttoggleButtons(ev, mappy) {\n\t\tfor (var key in mappy) {\n\t\t\tlet button = mappy[key]\n\t\t\tif (key === ev.currentTarget.value) {\n\t\t\t\tbutton.clickedOn()\n\t\t \t}\n\t\t \telse {\n\t\t \t\tbutton.clickedOff()\n\t\t \t}\n\t\t}\n\t}\n\n\n\t// upon submitting, value of action field should change and log of all values selected should appear\n\thandleSubmit() {\n\t\t// also works, just puts the error somewhere else\n\t\tif (!this.state.holeValue.match(/^([AKQJakqj2-9]|10)([AKQJakqj2-9]|10)([osOS])$/)) {\n\t\t\t// throw error message if hole input is invalid\n\t\t\tthis.setState({action: \"Hole Input Invalid\"})\n\t\t}\n\t\telse {\n\t\t\t// display all clicked buttons in console log\n\t\t\tvar final_array = [this.state.potValue, this.state.stackValue, this.state.heroValue,\n\t\t\tthis.state.villainValue, this.state.bvbValue, this.state.holeValue]\n\n\t\t\tconsole.log(final_array)\n\n\t\t\t// TEMP - set output value\n\t\t\tthis.setState ({action: \"RAISE 2.3X\"})\n\t\t}\n\t}\n\n\n\n\trender() {\n\t\treturn (\n\t\t\t// created new div \"final row\" for styling purposes\n\t\t\t<div>\n\t\t\t\t<h5>POT TYPE</h5>\n\t\t\t\t<PotType pToggleButtons={this.toggleButtons} updatePotState={this.updatePotValue}/>\n\n\t\t\t\t<h5>STACK DEPTH</h5>\n\t\t\t\t<StackDepth sToggleButtons={this.toggleButtons} updateStackState={this.updateStackValue} />\n\n\t\t\t\t<h5>HERO</h5>\n\t\t\t\t<Hero hToggleButtons={this.toggleButtons} updateHeroState={this.updateHeroValue} villainValue={this.state.villainValue} potValue={this.state.potValue}/>\n\n\t\t\t\t<h5>VILLAIN</h5>\n\t\t\t\t<Villain vToggleButtons={this.toggleButtons} updateVillainState={this.updateVillainValue} heroValue={this.state.heroValue} potValue={this.state.potValue}/>\n\n\t\t\t\t<h5>BVB</h5>\n\n\t\t\t\t<div className = \"bvbRow\">\n\t\t\t\t\t<BvB bToggleButtons={this.toggleButtons} updateBvbState={this.updateBvbValue} heroValue={this.state.heroValue} potValue={this.state.potValue}/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className = \"finalRow\">\n\t\t\t\t\t<HoleInput potValue={this.state.potValue} updateHoleState={this.updateHoleValue} />\n\t\t\t\t\t<RefreshButton/>\n\t\t\t\t\t<SubmitButton holeInputValue={this.state.holeValue} submitState={this.submitState} handleSubmit={this.handleSubmit}/>\n\t\t\t\t\t<Result finalResult={this.state.action}/>\n\t\t\t\t\t<CalcButton/>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}