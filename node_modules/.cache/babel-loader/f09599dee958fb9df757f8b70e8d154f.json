{"ast":null,"code":"var _jsxFileName = \"/Users/nupurmaheshwari/Documents/Poker/pokertest/src/calcCode.js\";\nimport React from 'react';\n\nclass Calculator extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      firstVal: '',\n      secondVal: '',\n      operator: '',\n      display: '0'\n    };\n\n    this.keypressHandler = ev => {\n      const {\n        setNumberValue,\n        setOperatorValue,\n        equalHandler,\n        allClear,\n        deleteChar\n      } = this;\n      const {\n        operator,\n        secondVal\n      } = this.state;\n      const numRegex = /^([0-9]|\\.)*$/g;\n      const opRegex = /[+|\\-|:|*]/g;\n      const eqRegex = /(=)/g;\n      const delRegex = /(Backspace|Delete)/g;\n      const acRegex = /(Escape)/g;\n      const key = ev.key;\n      const isNumber = !!numRegex.exec(key);\n      const isOperator = !!opRegex.exec(key);\n      const isEqual = !!eqRegex.exec(key);\n      const isDel = !!delRegex.exec(key);\n      const isAc = !!acRegex.exec(key);\n\n      if (key && isNumber) {\n        setNumberValue(key + '');\n      }\n\n      if (key && isOperator) {\n        setOperatorValue(key + '');\n      }\n\n      if (key && isEqual) {\n        equalHandler();\n      }\n\n      if (key && isDel) {\n        deleteChar();\n      }\n\n      if (key && isAc) {\n        allClear();\n      }\n    };\n\n    this.resetState = resetAll => {\n      if (resetAll) {\n        this.setState({\n          firstVal: '',\n          secondVal: '',\n          operator: '',\n          display: '0'\n        });\n      } else {\n        this.setState({\n          firstVal: '',\n          secondVal: '',\n          operator: ''\n        });\n      }\n    };\n\n    this.hasPoint = value => {\n      return value.indexOf('.') > -1;\n    };\n\n    this.setNumberValue = value => {\n      const {\n        firstVal,\n        secondVal,\n        operator\n      } = this.state;\n      const {\n        fixNumberString,\n        setDisplay\n      } = this;\n      let total; // if point is pressed, check if we already have it in current states\n\n      if (value === '.') {\n        if (!operator && !this.hasPoint(firstVal)) {\n          total = fixNumberString(firstVal + value);\n          this.setState({\n            firstVal: total\n          });\n        }\n\n        if (!!operator && !this.hasPoint(secondVal)) {\n          total = fixNumberString(secondVal + value);\n          this.setState({\n            secondVal: total\n          });\n        }\n\n        if (total) {\n          setDisplay(total + '');\n        }\n\n        return;\n      } // if input is a number, check if it's first or second number\n\n\n      if (!operator) {\n        total = fixNumberString(firstVal + value);\n        this.setState({\n          firstVal: total\n        });\n      } else {\n        total = fixNumberString(secondVal + value);\n        this.setState({\n          secondVal: total\n        });\n      }\n\n      setDisplay(total + '');\n    };\n\n    this.getOverall = () => {\n      const {\n        firstVal,\n        secondVal,\n        operator\n      } = this.state;\n      return firstVal + ' ' + operator + ' ' + secondVal;\n    };\n\n    this.setDisplay = value => {\n      const {\n        firstVal,\n        secondVal\n      } = this.state;\n      this.setState({\n        display: value\n      });\n    };\n\n    this.getCurrentTargetValue = () => {\n      const {\n        firstVal,\n        secondVal,\n        operator\n      } = this.state;\n      return !operator ? firstVal : secondVal;\n    };\n\n    this.numberClickHandler = e => {\n      const value = e.target.innerHTML;\n\n      if (value) {\n        this.setNumberValue(value);\n      }\n    };\n\n    this.setOperatorValue = operatorInput => {\n      const {\n        firstVal,\n        secondVal,\n        operator,\n        display\n      } = this.state;\n      const {\n        fixNumberString,\n        calculate,\n        setDisplay\n      } = this;\n      const fixedNumber = fixNumberString(firstVal, false);\n\n      if (firstVal && !secondVal) {\n        this.setState({\n          operator: operatorInput,\n          display: fixedNumber\n        });\n      } else if (firstVal && operator && secondVal) {\n        const total = calculate();\n        this.setState({\n          operator: operatorInput,\n          firstVal: total + '',\n          secondVal: ''\n        });\n        setDisplay(total + '');\n      } else {\n        this.setState({\n          operator: operatorInput,\n          firstVal: fixNumberString(display, false)\n        });\n      }\n    };\n\n    this.operatorClickHandler = e => {\n      const {\n        setOperatorValue\n      } = this;\n      const operatorInput = e.target.innerHTML;\n      setOperatorValue(operatorInput);\n    };\n\n    this.allClear = () => {\n      this.resetState(true);\n    };\n\n    this.deleteChar = () => {\n      const {\n        firstVal,\n        secondVal,\n        operator\n      } = this.state;\n      const opRegex = /[+|\\-|:|*]/g;\n\n      if (!operator) {\n        const newVal = firstVal.slice(0, -1);\n        this.setState({\n          firstVal: newVal,\n          display: newVal ? newVal : '0'\n        });\n      } else if (operator && !secondVal) {\n        this.setState({\n          display: firstVal,\n          operator: ''\n        });\n      } else {\n        const newVal = secondVal.slice(0, -1);\n        this.setState({\n          secondVal: newVal,\n          display: newVal ? newVal : '0'\n        });\n      }\n    };\n\n    this.removeZeroAtStart = value => {\n      return value.indexOf('0') === 0 ? value.substring(1) : value;\n    };\n\n    this.fixNumberString = (value, finalize = false) => {\n      // if input has hanging point e.g. '0.'/'1.', add trailing zero\n      // should only run when moving to second value / begin calculation\n      if (finalize && value.indexOf('.') === value.length - 1 && value.length > 1) {\n        return value + '0';\n      } // if value has zero prefix but not a decimal value, e.g. '01'/'03', remove zero\n\n\n      if (value.indexOf('0') === 0 && !value.indexOf('0.') === 0) {\n        return value.substring(1);\n      } // if value is a first point input '.', add zero prefix\n\n\n      if (value.indexOf('.') === 0 && value.length === 1) {\n        return '0.';\n      }\n\n      if (!value) {\n        return '0';\n      }\n\n      return value;\n    };\n\n    this.calculate = () => {\n      const {\n        firstVal,\n        secondVal,\n        operator\n      } = this.state;\n      const {\n        fixNumberString\n      } = this;\n      const vfirstVal = fixNumberString(firstVal, true);\n      const vsecondVal = fixNumberString(secondVal, true);\n      let total = '0';\n\n      switch (operator) {\n        case '-':\n          total = parseFloat(vfirstVal) - parseFloat(vsecondVal);\n          break;\n\n        case '*':\n          total = parseFloat(vfirstVal) * parseFloat(vsecondVal);\n          break;\n\n        case ':':\n          total = parseFloat(vfirstVal) / parseFloat(vsecondVal);\n          break;\n\n        case '+':\n        default:\n          total = parseFloat(vfirstVal) + parseFloat(vsecondVal);\n          break;\n      }\n\n      return total.toLocaleString();\n    };\n\n    this.equalHandler = () => {\n      const {\n        firstVal,\n        secondVal,\n        operator\n      } = this.state;\n      const {\n        setDisplay,\n        resetState,\n        calculate\n      } = this;\n\n      if (firstVal && secondVal && operator) {\n        let total = calculate();\n        setDisplay(total + '');\n        resetState();\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      keypressHandler\n    } = this;\n    document.addEventListener('keyup', ev => {\n      keypressHandler(ev);\n    });\n  }\n\n  render() {\n    const {\n      display,\n      operator\n    } = this.state;\n    const {\n      operatorClickHandler,\n      numberClickHandler,\n      deleteChar,\n      allClear,\n      equalHandler,\n      getOverall\n    } = this;\n\n    const activeOperator = name => {\n      return operator === name ? 'active' : '';\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"display-overall\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }\n    }, getOverall().trim()), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"display-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }\n    }, display)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"operator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: activeOperator('+'),\n      onClick: operatorClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }\n    }, \"+\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: activeOperator('-'),\n      onClick: operatorClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: activeOperator(':'),\n      onClick: operatorClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    }, \":\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: activeOperator('*'),\n      onClick: operatorClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    }, \"*\"))), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"numbers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }\n    }, \"3\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }\n    }, \"6\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }\n    }, \"9\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }\n    }, \".\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: numberClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: deleteChar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }\n    }, \"C\"))), \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column sides\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ac\",\n      onClick: allClear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 13\n      }\n    }, \"AC\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"equal\",\n      onClick: equalHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    }, \"=\")), \" \"), \" \");\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/Users/nupurmaheshwari/Documents/Poker/pokertest/src/calcCode.js"],"names":["React","Calculator","Component","state","firstVal","secondVal","operator","display","keypressHandler","ev","setNumberValue","setOperatorValue","equalHandler","allClear","deleteChar","numRegex","opRegex","eqRegex","delRegex","acRegex","key","isNumber","exec","isOperator","isEqual","isDel","isAc","resetState","resetAll","setState","hasPoint","value","indexOf","fixNumberString","setDisplay","total","getOverall","getCurrentTargetValue","numberClickHandler","e","target","innerHTML","operatorInput","calculate","fixedNumber","operatorClickHandler","newVal","slice","removeZeroAtStart","substring","finalize","length","vfirstVal","vsecondVal","parseFloat","toLocaleString","componentDidMount","document","addEventListener","render","activeOperator","name","trim"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nclass Calculator extends React.Component {\n  state = {\n    firstVal: '',\n    secondVal: '',\n    operator: '',\n    display: '0',\n  }\n\n  componentDidMount() {\n    const { keypressHandler } = this\n    document.addEventListener('keyup', ev => {\n      keypressHandler(ev)\n    })\n  }\n\n  keypressHandler = ev => {\n    const {\n      setNumberValue,\n      setOperatorValue,\n      equalHandler,\n      allClear,\n      deleteChar,\n    } = this\n    const { \n      operator,\n      secondVal,\n    } = this.state\n    const numRegex = /^([0-9]|\\.)*$/g;\n    const opRegex =  /[+|\\-|:|*]/g;\n    const eqRegex =  /(=)/g;\n    const delRegex = /(Backspace|Delete)/g;\n    const acRegex = /(Escape)/g;\n    const key = ev.key\n   \n    const isNumber = !!numRegex.exec(key)\n    const isOperator = !!opRegex.exec(key)\n    const isEqual = !!eqRegex.exec(key)\n    const isDel = !!delRegex.exec(key)\n    const isAc = !!acRegex.exec(key)\n    \n    if (key && isNumber) {\n      setNumberValue(key + '')\n    }\n    \n    if (key && isOperator) {\n      setOperatorValue(key + '')\n    }\n    \n    if (key && isEqual) {\n      equalHandler()\n    }\n    \n    if (key && isDel) {\n      deleteChar()\n    }\n    \n    if (key && isAc) {\n      allClear()\n    }\n  }\n\n  resetState = resetAll => {\n    if (resetAll) {\n      this.setState({\n        firstVal: '',\n        secondVal: '',\n        operator: '',\n        display: '0',\n     })\n    } else {\n      this.setState({\n        firstVal: '',\n        secondVal: '',\n        operator: '',\n     })\n    }\n  } \n  \n  hasPoint = (value) => {\n    return value.indexOf('.') > -1\n  }\n  \n  setNumberValue = value => {\n    const {\n      firstVal,\n      secondVal,\n      operator,\n    } = this.state\n    const { \n      fixNumberString,\n      setDisplay,\n    } = this\n    let total\n    \n    // if point is pressed, check if we already have it in current states\n    if (value === '.') {\n      if (!operator && !this.hasPoint(firstVal)) {      \n        total = fixNumberString(firstVal + value)\n        this.setState({\n          firstVal: total\n        })\n      }\n      if (!!operator && !this.hasPoint(secondVal)) {\n        total = fixNumberString(secondVal + value)\n        this.setState({\n          secondVal: total\n        })\n      }\n      if (total) {\n        setDisplay(total + '')\n      }\n      return\n    }\n    \n    // if input is a number, check if it's first or second number\n    if (!operator) {\n      total = fixNumberString(firstVal + value)\n      this.setState({\n        firstVal: total\n      })\n    } else {\n      total = fixNumberString(secondVal + value)\n      this.setState({\n        secondVal: total\n      })\n    }\n    setDisplay(total + '')\n  }\n  \n  getOverall = () => {\n    const { \n      firstVal,\n      secondVal,\n      operator,\n    } = this.state\n    return firstVal + ' ' + operator + ' ' + secondVal\n  }\n  \n  setDisplay = value => {\n    const { \n      firstVal,\n      secondVal,\n    } = this.state\n    \n    this.setState({\n      display: value,\n    })\n  }\n  \n  getCurrentTargetValue = () => {\n    const {\n      firstVal,\n      secondVal,\n      operator,\n    } = this.state\n    return !operator ? firstVal : secondVal\n  }\n  \n  numberClickHandler = (e) => {\n    const value = e.target.innerHTML\n    if (value) {\n      this.setNumberValue(value)\n    }\n  }\n  \n  setOperatorValue = operatorInput => {\n    const { \n      firstVal,\n      secondVal,\n      operator,\n      display,\n    } = this.state\n    const { \n      fixNumberString,\n      calculate,\n      setDisplay,\n    } = this\n    const fixedNumber = fixNumberString(firstVal, false)\n    \n    if (firstVal && !secondVal) {\n      this.setState({\n        operator: operatorInput,\n        display: fixedNumber,\n      })\n    } else if (firstVal && operator && secondVal) {\n     const total = calculate()\n     this.setState({\n       operator: operatorInput,\n       firstVal: total + '',\n       secondVal: '',\n     })\n     setDisplay(total + '')\n    } else {\n      this.setState({\n        operator: operatorInput,\n        firstVal: fixNumberString(display, false),\n      })\n    }\n  }\n  \n  operatorClickHandler = (e) => {\n    const { setOperatorValue } = this\n    const operatorInput = e.target.innerHTML\n    \n    setOperatorValue(operatorInput)\n  }\n  \n  allClear = () => {\n    this.resetState(true)\n  }\n  \n  deleteChar = () => {\n    const {\n      firstVal,\n      secondVal,\n      operator,\n    } = this.state\n    const opRegex =  /[+|\\-|:|*]/g;\n    \n    if (!operator) {\n      const newVal = firstVal.slice(0, -1)\n      this.setState({\n        firstVal: newVal,\n        display: newVal ? newVal : '0',\n      })\n    } else if (operator && !secondVal) {\n      this.setState({\n        display: firstVal,\n        operator: '',\n      })\n    } else {\n      const newVal = secondVal.slice(0, -1)\n      this.setState({\n        secondVal: newVal,\n        display: newVal ? newVal : '0',\n      })\n    }\n  }\n  \n  removeZeroAtStart = value => {\n    return value.indexOf('0') === 0 ? value.substring(1) : value\n  }\n  \n  fixNumberString = (value, finalize = false) => {\n    // if input has hanging point e.g. '0.'/'1.', add trailing zero\n    // should only run when moving to second value / begin calculation\n    if (finalize && value.indexOf('.') === value.length - 1 && value.length > 1) { \n      return value + '0'\n    }\n    // if value has zero prefix but not a decimal value, e.g. '01'/'03', remove zero\n    if (value.indexOf('0') === 0 && !value.indexOf('0.') === 0) {\n      return value.substring(1)\n    }\n    // if value is a first point input '.', add zero prefix\n    if (value.indexOf('.') === 0 && value.length === 1) {\n      return '0.'\n    }\n    if (!value) {\n      return '0'\n    }\n    return value\n  }\n  \n  calculate = () => {\n    const {\n      firstVal,\n      secondVal,\n      operator,\n    } = this.state\n    const {\n      fixNumberString,\n    } = this\n    \n    const vfirstVal = fixNumberString(firstVal, true)\n    const vsecondVal = fixNumberString(secondVal, true)\n    let total = '0';\n    \n    switch (operator) {\n      case '-' :\n        total = parseFloat(vfirstVal) - parseFloat(vsecondVal)\n        break;\n      case '*':\n        total = parseFloat(vfirstVal) * parseFloat(vsecondVal)\n        break;\n      case ':' :\n        total = parseFloat(vfirstVal) / parseFloat(vsecondVal)\n        break;\n      case '+' :\n      default:\n        total = parseFloat(vfirstVal) + parseFloat(vsecondVal)\n        break;\n    }\n    \n    return total.toLocaleString()\n  }\n  \n  equalHandler = () => {\n    const {\n      firstVal,\n      secondVal,\n      operator,\n    } = this.state\n    const {\n      setDisplay,\n      resetState,\n      calculate,\n    } = this\n    \n    if (firstVal && secondVal && operator) {\n      let total = calculate()\n      setDisplay(total + '')\n      resetState()\n    }\n  }\n  \n  render() {\n    const { \n      display,\n      operator,\n    } = this.state\n    const {\n      operatorClickHandler,\n      numberClickHandler,\n      deleteChar,\n      allClear,\n      equalHandler,\n      getOverall,\n    } = this\n    const activeOperator = name => {\n      return operator === name ? 'active' : ''\n    }\n    return (\n      <div>\n        <div className=\"display\">\n          <p className=\"display-overall\">{ getOverall().trim() }</p>\n          <p className=\"display-text\">{ display }</p>\n        </div>\n        <div className=\"inputs\">\n          <div className=\"column main\">\n            <div className=\"operator\">\n              <div className=\"row\">\n                <button \n                  className={activeOperator('+')}\n                  onClick={operatorClickHandler}>+</button>\n                <button \n                  className={activeOperator('-')}\n                  onClick={operatorClickHandler}>-</button>\n                <button \n                  className={activeOperator(':')}\n                  onClick={operatorClickHandler}>:</button>\n                <button \n                  className={activeOperator('*')}\n                  onClick={operatorClickHandler}>*</button>\n              </div>\n            </div> { /* operator */ }\n            <div className=\"numbers\">\n              <div className=\"row\">\n                <button onClick={numberClickHandler}>1</button>\n                <button onClick={numberClickHandler}>2</button>\n                <button onClick={numberClickHandler}>3</button>\n              </div>\n              <div className=\"row\">\n                <button onClick={numberClickHandler}>4</button>\n                <button onClick={numberClickHandler}>5</button>\n                <button onClick={numberClickHandler}>6</button>\n              </div>\n              <div className=\"row\">\n                <button onClick={numberClickHandler}>7</button>\n                <button onClick={numberClickHandler}>8</button>\n                <button onClick={numberClickHandler}>9</button>\n              </div>\n              <div className=\"row\">\n                <button onClick={numberClickHandler}>.</button>\n                <button onClick={numberClickHandler}>0</button>\n                <button onClick={deleteChar}>C</button>\n              </div>\n            </div> { /* numbers */ }\n          </div> { /* main */ }\n          <div className=\"column sides\">\n            <button className=\"ac\" onClick={allClear}>AC</button>\n            <button className=\"equal\" onClick={equalHandler}>=</button>\n          </div> { /* sides */ }\n        </div> { /* inputs */ }\n      </div>\n    )\n  }\n}\n\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}